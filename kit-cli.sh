#!/bin/bash

DO_ALL=false
SRC_DIR=$PWD
DEST_DIR=$PWD

read -r -d "" HELPTEXT << EOF
NAME
    kit-cli.sh

SYNOPSIS
    kit-cli.sh [--source SRC_DIR] [--dest DEST_DIR] [--test TEST_DIR] [--all|FILE ...]

DESCRIPTION
    Command-line compiler for CodeKit .kit files.

    Use --source SRC_DIR to specify the root directory of your source code; all of your "include" files
    references in your .kit files need to be within this tree.

    Each FILE should be specified relative to SRC_DIR, e.g. if the absolute path is ~/src/website/index.kit
    then you probably want to run
        kit-cli.sh --source ~/src/website index.kit

    Alternatively, you can process all .kit files recursively in a particular source tree with
        kit-cli.sh --source ~/src/website --all

    The default value of SRC_DIR is \$PWD.

    Use the --dest DEST_DIR option if you want to save the compiled HTML files to a different place
    rather than having them alongside the source files.

    So extending the example above, if you want to separate your source files and build files
    you probably want an invocation like
        kit-cli.sh --source ~/src/website/source --dest ~/src/website/build --all

    Input file \$SRC_DIR/foo/bar.kit will be saved to \$DEST_DIR/foo/bar.html.

    The default value of DEST_DIR is \$SRC_DIR.

    If you want to compare your output against something generated by CodeKit, use
    --test DIR to point to that directory full of model HTML we should compare our
    output against. The comparison is done using "diff -Bw" to ignore whitespace.
EOF

while true; do
    case "$1" in
        -h|--help)
            echo "$HELPTEXT" >&2
            exit 0
            ;;
        --source)
            SRC_DIR=$(realpath "$2")
            shift 2
            ;;
        --dest)
            DEST_DIR=$(realpath "$2")
            shift 2
            ;;
        --test)
            TEST_DIR=$(realpath "$2")
            shift 2
            ;;
        --all)
            DO_ALL=true
            shift
            ;;
        *)
            break
            ;;
    esac
done

function docker_run(){
    docker run --rm --name kit-compile \
        --volume "$SRC_DIR":/opt/input \
        --volume "$DEST_DIR":/opt/output \
        kit-cli $FILE_UID $FILE_GID "$REL_FILE"
}

function kit_compile(){
    local REL_FILE
    local REL_FILE_OUT
    local FILE_UID
    local FILE_GID

    for INPUT in $*; do
        if [ -f "$INPUT" ]; then
            REL_FILE=$(realpath "$INPUT" | perl -p -e "s|$SRC_DIR/||")
        elif [ -f "$SRC_DIR/$INPUT" ]; then
            REL_FILE=$"$INPUT"
        else
            echo "Error: $INPUT does not exist relative to $SRC_DIR" >&2
            continue
        fi

        if ! grep -q '<body>' "$SRC_DIR/$REL_FILE"; then
            echo "Warning: $REL_FILE has no <body>; not compiling fragment" >&2
            continue
        fi

        STAT_OPT="-c"
        if [ "$(uname)" = "Darwin" ]; then
            STAT_OPT="-f"
        fi

        FILE_UID=$(stat $STAT_OPT '%u' "$SRC_DIR/$REL_FILE")
        FILE_GID=$(stat $STAT_OPT '%g' "$SRC_DIR/$REL_FILE")

        mkdir -p "$DEST_DIR/$(dirname "$REL_FILE")"

        if docker_run $FILE_UID $FILE_GID "$REL_FILE"; then
            if [ -n "$TEST_DIR" ]; then
                REL_FILE_OUT=$(echo "$REL_FILE" | perl -p -e 's/\.kit/.html/')
                echo "    diff -Bw $TEST_DIR/$REL_FILE_OUT $DEST_DIR/$REL_FILE_OUT" >&2
                diff -Bw "$TEST_DIR/$REL_FILE_OUT" "$DEST_DIR/$REL_FILE_OUT"
            fi
        fi
    done
}

echo "Source: $SRC_DIR"
echo "Dest:   $DEST_DIR"

if $DO_ALL; then
    find $SRC_DIR -type f -name "*.kit" | while read FILE; do
        kit_compile $FILE
    done
else
    for f in $*; do
        kit_compile $f
    done
fi
